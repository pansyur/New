version: v1.0

name: Download Torrent and Upload to PixelDrain

agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu2004

blocks:
  - name: Download & Upload
    task:
      env_vars:
        - name: PIXELDRAIN_API_KEY
          value: 5f45f184-64bb-4eaa-be19-4a5f0459db49   # üîê Replace with your actual key
        - name: TORRENT_MAGNET
          value: "magnet:?xt=urn:btih:..."              # üîó Replace with your magnet link
      jobs:
        - name: Download and Upload Files
          commands:
            - checkout
            - echo "Installing webtorrent-cli..."
            - sudo apt update
            - sudo apt install -y nodejs npm python3
            - pip install requests
            - npm install webtorrent-cli

            - echo "Downloading torrent..."
            - mkdir downloads
            - npx webtorrent "magnet:?xt=urn:btih:B827925D3E6D87A212EEEAE2005ECDD6EA2B4763&dn=PC%20Gamer%20USA%20-%20August%202025&tr=udp://tracker.bittor.pw:1337/announce&tr=udp://tracker.opentrackr.org:1337/announce&tr=udp://tracker.dler.org:6969/announce&tr=udp://open.stealth.si:80/announce&tr=udp://tracker.torrent.eu.org:451/announce&tr=udp://exodus.desync.com:6969/announce&tr=udp://open.demonii.com:1337/announce" --out downloads --quiet
            - echo "Uploading files to filebin..."
            - cat <<'EOF' > upload_files.py
import os
import requests
import concurrent.futures

directory = 'downloads'
url_template = 'https://filebin.net/Sahaujwsh/{filename}'

if not os.path.exists(directory):
    print(f"Directory {directory} does not exist.")
    exit(1)

def upload_file(file_path):
    filename = os.path.basename(file_path)
    print(f'Starting upload: {filename}')
    try:
        with open(file_path, 'rb') as f:
            response = requests.post(url_template.format(filename=filename), headers={
                'accept': 'application/json',
                'Content-Type': 'application/octet-stream'
            }, data=f)
        try:
            response_data = response.json()
        except Exception:
            response_data = response.text
        print(f'Finished upload: {filename} with status {response.status_code}')
        return filename, response.status_code, response_data
    except Exception as e:
        print(f'Failed to upload {filename}: {e}')
        return filename, None, str(e)

files = [os.path.join(directory, f) for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]

with concurrent.futures.ThreadPoolExecutor() as executor:
    futures = [executor.submit(upload_file, file) for file in files]
    for future in concurrent.futures.as_completed(futures):
        filename, status_code, response_data = future.result()
        print(f'Uploaded {filename}: Status {status_code}, Response: {response_data}')
EOF
            - python3 upload_files.py
  
